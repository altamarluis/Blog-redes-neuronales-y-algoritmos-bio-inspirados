[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Portafolio trabajos",
    "section": "",
    "text": "Métodos de optimización heurística\n\n\n\n\n\n\noptimización\n\n\nmétodos heurísticos\n\n\npython\n\n\n\n\n\n\n\n\n\nNov 15, 2024\n\n\nJulián Castaño Pineda, Luis Andrés Altamar Romero, Catalina Restrepo Salgado, Tomás Rodríguez Taborda\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nNov 12, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Métodos de optimización heurística",
    "section": "",
    "text": "Code\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.animation import FuncAnimation\nfrom IPython.display import HTML\nfrom IPython.display import display\nfrom IPython.display import Image as IPImage\nimport io\nfrom PIL import Image\nEl objetivo de esta sección es evaluar diversos métodos de optimización aplicados a varias funciones, con el fin de medir su rendimiento. En particular, se utilizarán las funciones de Rosenbrock, Schwefel, Griewank, Goldstein-Price y la función de las seis jorobas de camello. Estas funciones serán optimizadas mediante el método del gradiente descendente y tres algoritmos heurísticos: Algoritmos Evolutivos, Optimización por Enjambre de Partículas y Evolución Diferencial.\nAl final, se comentará sobre los aportes de los métodos de descenso por gradiente y los métodos heurísticos, considerando el valor final de la función objetivo y el número de evaluaciones de la función objetivo, en un entorno de simulación con varios parámetros y condiciones para garantizar conclusiones significativas."
  },
  {
    "objectID": "posts/post-with-code/index.html#optimización-por-descenso-del-gradiente",
    "href": "posts/post-with-code/index.html#optimización-por-descenso-del-gradiente",
    "title": "Métodos de optimización heurística",
    "section": "2.1 Optimización por descenso del gradiente",
    "text": "2.1 Optimización por descenso del gradiente\nEl descenso del gradiente es un algoritmo de optimización iterativo que busca encontrar el mínimo local de una función diferenciable. La idea principal es moverse en la dirección opuesta al gradiente de la función en cada punto, ya que el gradiente apunta en la dirección de máximo crecimiento.\nSegun (Bishop 2006), para una función \\(f(x)\\), el algoritmo actualiza iterativamente el punto \\(x\\) usando la regla:\n\\[ x_{t+1} = x_t - \\eta \\nabla f(x_t) \\]\ndonde:\n\n\\(x_t\\) es el punto actual\n\\(\\eta\\) es la tasa de aprendizaje\n\\(\\nabla f(x_t)\\) es el gradiente de la función en \\(x_t\\)\n\nEl gradiente \\(\\nabla f\\) es un vector que contiene las derivadas parciales respecto a cada variable: \\[\\nabla f(x_1, x_2) = \\begin{bmatrix} \\frac{\\partial f}{\\partial x_1}, \\frac{\\partial f}{\\partial x_2} \\end{bmatrix}\\]\nEl gradiente \\(\\nabla f\\) se puede aproximar numéricamente usando diferencias finitas. (Bishop 2006) plantean que, se puede mejorar consideramblemente la presición del método usando diferencias centrales simétricas. En este caso, para una función \\(f(x_1, x_2)\\), las derivadas parciales se calculan como:\n\\[ \\frac{\\partial f}{\\partial x_1} \\approx \\frac{f(x_1 + h, x_2) - f(x_1 - h, x_2)}{2h} \\]\n\\[ \\frac{\\partial f}{\\partial x_2} \\approx \\frac{f(x_1, x_2 + h) - f(x_1, x_2 - h)}{2h} \\]\ndonde \\(h\\) es un pequeño incremento (típicamente \\(10^{-7}\\) o \\(10^{-8}\\)).\n\n\nCode\ndef partial_derivative(x0, func, i, h, *args):\n  e = np.zeros(len(x0))\n  e[i] = 1\n  return (func(x0+h*e, *args) - func(x0-h*e, *args))/(2*h)\n\ndef numerical_gradient(x0, func, h, *args):\n  gradient = np.zeros(len(x0))\n  for i in range(len(x0)):\n    gradient[i] = partial_derivative(x0, func, i, h, *args)\n  return gradient\n\ndef gradient_descent_num_dev_mult(x0, eta, func, h, max_iter, *args):\n  \"\"\"\n  Perform gradient descent with numerical derivatives for a multi-dimensional function.\n\n  Parameters:\n      x0 (array-like): Initial guess for the variables.\n      eta (float): Learning rate.\n      func (callable): Function to minimize.\n      h (float): Step size for numerical gradient calculation.\n      max_iter (int): Maximum number of iterations.\n      *args: Additional arguments for the function.\n\n  Returns:\n      result_df (pd.DataFrame): DataFrame with columns ['x1', 'x2', 'f(x1,x2)']\n                                containing the trajectory of points.\n  \"\"\"\n  x_old = np.array(x0)\n  x_hist = []  # List to store the history of x and f(x)\n\n  for i in range(max_iter):\n      # Calculate the gradient numerically\n      gradient = numerical_gradient(x_old, func, h, *args)\n\n      # Update x based on gradient descent rule\n      x_new = x_old - eta * gradient\n\n      # Append current x and function value to history\n      x_hist.append([x_old[0], x_old[1], func(x_old, *args)])\n\n      # Update x_old\n      x_old = x_new\n\n  # Add the final position and function value\n  x_hist.append([x_new[0], x_new[1], func(x_new, *args)])\n\n  # Convert history to a pandas DataFrame\n  result_df = pd.DataFrame(x_hist, columns=['x1', 'x2', 'f(x1,x2)'])\n\n  return result_df\n\n\nA continuación, se presentan las animaciones que ilustran la aplicación del descenso del gradiente en las seis funciones evaluadas. Los parámetros iniciales, la tasa de aprendizaje y el número de iteraciones del algoritmo fueron seleccionados cuidadosamente para optimizar la visualización del funcionamiento del método.Estos parámetros se detallan en las tablas a continuación.\n\nFunción de RosenbrockFunción de RastriginFunción de SchwefelFunción de GriewankFunción Goldstein-PriceFunción de las seis jorobas de camello\n\n\n\\[f(\\mathbf{x}) = \\sum_{i=1}^{d-1} \\left[ 100(x_{i+1} - x_i^2)^2 + (x_i - 1)^2 \\right]\\]\n\n\n\n\\(x_{1_0}\\)\n\\(x_{2_0}\\)\n\\(\\eta\\)\n\\(n\\)\n\n\n\n\n-1.5\n-1.7\n0.001\n30\n\n\n\n\n\n\n\\[f(\\mathbf{x}) = 10d + \\sum_{i=1}^{d} \\left[ x_i^2 - 10 \\cos(2\\pi x_i) \\right]\\]\n\n\n\n\\(x_{1_0}\\)\n\\(x_{2_0}\\)\n\\(\\eta\\)\n\\(n\\)\n\n\n\n\n-0.46\n0.46\n0.005\n30\n\n\n\n\n\n\n\\[ f(\\mathbf{x}) = 418.9829d - \\sum_{i=1}^{d} x_i \\sin(\\sqrt{|x_i|}) \\]\n\n\n\n\\(x_{1_0}\\)\n\\(x_{2_0}\\)\n\\(\\eta\\)\n\\(n\\)\n\n\n\n\n310\n310\n0.8\n30\n\n\n\n\n\n\n\\[ f(\\mathbf{x}) = 1 + \\frac{1}{4000} \\sum_{i=1}^{d} x_i^2 - \\prod_{i=1}^{d} \\cos\\left(\\frac{x_i}{\\sqrt{i}}\\right) \\]\n\n\n\n\\(x_{1_0}\\)\n\\(x_{2_0}\\)\n\\(\\eta\\)\n\\(n\\)\n\n\n\n\n-500\n500\n70\n33\n\n\n\n\n\n\n\\[\n\\begin{align}\nf(x_1, x_2) = & \\left[1 + (x_1 + x_2 + 1)^2 (19 - 14x_1 + 3x_1^2 - 14x_2 + 6x_1x_2 + 3x_2^2)\\right] \\\\\n         & \\left[30 + (2x_1 - 3x_2)^2 (18 - 32x_1 + 12x_1^2 + 48x_2 - 36x_1x_2 + 27x_2^2)\\right]\n\\end{align}\n\\]\n\n\n\n\\(x_{1_0}\\)\n\\(x_{2_0}\\)\n\\(\\eta\\)\n\\(n\\)\n\n\n\n\n0.5\n-1.5\n0.00005\n50\n\n\n\n\n\n\n\\[ f(x_1, x_2) = \\left(4 - 2.1x_1^2 + \\frac{x_1^4}{3}\\right)x_1^2 + x_1x_2 + \\left(-4 + 4x_2^2\\right)x_2^2 \\]\n\n\n\n\\(x_{1_0}\\)\n\\(x_{2_0}\\)\n\\(\\eta\\)\n\\(n\\)\n\n\n\n\n-1\n-1\n0.015\n33\n\n\n\n\n\n\n\nEl método del gradiente descendente puede imaginarse como una persona deslizándose por una colina representada por una función. El punto de inicio es el lugar desde donde comienza a deslizarse, y la tasa de aprendizaje actúa como la aceleración que controla la velocidad del deslizamiento en cada paso. Si esta aceleración es demasiado alta, puede ayudar a llegar más rápido al valle más bajo, pero también existe el riesgo de salir del camino o incluso terminar subiendo una colina debido a un impulso excesivo que sobrepasa el objetivo.\nPara garantizar que este método sea eficiente, es importante considerar lo siguiente:\n\nTasa de aprendizaje: Un valor demasiado grande puede causar divergencia, mientras que uno muy pequeño puede hacer que el proceso sea extremadamente lento.\nPunto inicial: La ubicación inicial afecta la trayectoria y la probabilidad de alcanzar el mínimo global.\nCriterio de parada: Es esencial definir cuándo detener el algoritmo, ya sea por alcanzar un número máximo de iteraciones o porque la mejora entre pasos sea insignificante (convergencia)."
  },
  {
    "objectID": "posts/post-with-code/index.html#agoritmo-genético",
    "href": "posts/post-with-code/index.html#agoritmo-genético",
    "title": "Métodos de optimización heurística",
    "section": "2.2 Agoritmo genético",
    "text": "2.2 Agoritmo genético\nUn algoritmo genético (GA) es un método heurístico de optimización inspirado en los principios de la selección natural y la evolución biológica, propuesto inicialmente por (Holland 1975). Este enfoque busca soluciones óptimas en un espacio de búsqueda utilizando una población de candidatos.\n\n2.2.1 Concepto General\nEl algoritmo genético simula el proceso evolutivo a través de las siguientes etapas:\n\nSelección: Elegir individuos con mayor fitness.1\nCruce: Combinar soluciones para generar descendencia.\nMutación: Introducir variación genética.\n\nMatemáticamente, en un problema de minimización, el objetivo es encontrar:\n\\[ x^* = \\arg\\min_{x \\in \\mathbb{R}^n} f(x) \\]\ndonde:\n\n\\(x\\) representa un individuo en el espacio de búsqueda.\n\\(f(x)\\) es la función objetivo que evalúa la calidad de \\(x\\).\n\nCada solución candidata se representa como un individuo, que puede ser un vector real o un cromosoma binario:\n\\[x = (x_1, x_2, \\ldots, x_n) \\in \\mathbb{R}^n\\]\nLa función objetivo mide qué tan buena es una solución:\n\\[\\text{Fitness}(x) = f(x)\\]\nPara problemas de minimización, menor \\(f(x)\\) implica mejor fitness.\n\n\n\n2.2.2 Etapas\nInicialización de la Población\nSe genera una población inicial de \\(P\\) individuos de forma aleatoria dentro de un intervalo \\([a, b]\\) :\n\\[x_{ij} \\sim \\text{U}(a, b), \\quad \\forall i \\in \\{1, 2, \\ldots, P\\}, \\; j \\in \\{1, 2, \\ldots, n\\}\\] donde:\n\n\\(x_{ij}\\) es la \\(j-ésima\\) coordenada del \\(i-ésimo\\) individuo.\n\n\n\nCode\n# Inicializar población\ndef initialize_population(size, dim, bounds):\n    return np.random.uniform(bounds[0], bounds[1], (size, dim))\n\n\n\nEvaluación del Fitness\nCada individuo de la población es evaluado usando la función objetivo:\n\\(\\text{Fitness}_i = f(x_i)\\)\n\n\nCode\n# Evaluar fitness\ndef evaluate_fitness(population,fitness_function):\n    return np.array([fitness_function(ind) for ind in population])\n\n\n\nSelección\nSe seleccionan individuos para reproducirse basándose en su fitness. Un métodos comune es el método de torneo, donde primero se seleccionan \\(k\\) individuos al azar y luego se elige al mejor de ellos(mejor fitness):\n\\[\\text{Individuo seleccionado} = \\arg\\min_{j \\in S} \\text{Fitness}_j, \\; S \\subseteq \\{1, \\ldots, P\\}, \\; |S| = k\\]\n\n\nCode\n# Selección por torneo\ndef tournament_selection(population, fitness, k=3):\n    selected = []\n    for _ in range(len(population)):\n        candidates = np.random.choice(range(len(population)), k, replace=False)\n        winner = candidates[np.argmin(fitness[candidates])]\n        selected.append(population[winner])\n    return np.array(selected)\n\n\n\nCruce (Recombinación)\nDos individuos (padres) se combinan para generar descendencia. Un método común es punto de corte único, donde: 1. Se Elegie un punto de cruce aleatorio \\(k\\). 2. Se genera la descendencia mezclando las características de los padres.\n\\[\\text{Hijo 1} = (\\text{Padre}_1[:k], \\text{Padre}_2[k:])\\]\n\\[\\text{Hijo 2} = (\\text{Padre}_2[:k], \\text{Padre}_1[k:])\\]\nLa probabilidad de realizar un cruce está determinada por \\(p_c\\) (tasa de cruce).\n\n\nCode\n# Cruce\ndef crossover(parent1, parent2, crossover_rate):\n    if np.random.rand() &lt; crossover_rate:\n        point = np.random.randint(1, len(parent1))\n        child = np.concatenate([parent1[:point], parent2[point:]])\n        return child\n    return parent1 if np.random.rand() &lt; 0.5 else parent2\n\n\n\nMutación\nSe introduce una variación genética al modificar aleatoriamente uno o más genes(variables) en un individuo(punto del plano) con probabilidad \\(p_m\\):\n\\[x_{ij} = x_{ij} + \\Delta, \\quad \\Delta \\sim \\text{U}(-\\delta, \\delta)\\]\ndonde:\n\n\\(\\Delta\\) es una perturbación aleatoria.\n\\(x_{ij}\\) se restringe a los límites del problema.\n\n\n\nCode\n# Mutación\ndef mutate(individual, bounds, mutation_rate, delta):\n    for i in range(len(individual)):\n        if np.random.rand() &lt; mutation_rate:\n            individual[i] += np.random.uniform(-delta, delta)\n            individual[i] = np.clip(individual[i], bounds[0], bounds[1])\n    return individual\n\n\n\nEvaluación y Sustitución\nLa nueva población es evaluada, y mediante el uso de elitismo, es posible conservar a los mejores individuos. El algoritmo continúa iterando con esta población actualizada, mejorando progresivamente la optimización de la función objetivo al incrementar el fitness general de la población.\n\n\nCode\n# Algoritmo completo\ndef genetic_algorithm(fitness_function, population_size, generations, mutation_rate, crossover_rate, dim, bounds, delta):\n    population = initialize_population(population_size, dim, bounds)\n    best_individual = None\n    trajectory = []\n    populations = []\n\n    for generation in range(generations):\n        populations.append(population.copy())\n        fitness = evaluate_fitness(population, fitness_function)\n        \n        if best_individual is None or np.min(fitness) &lt; fitness_function(best_individual):\n            best_individual = population[np.argmin(fitness)]\n        \n        # Guardar la mejor solución de esta generación\n        trajectory.append((*best_individual, fitness_function(best_individual)))\n        \n        # Selección\n        selected_population = tournament_selection(population, fitness)\n        \n        # Cruce y mutación\n        new_population = []\n        for i in range(0, len(selected_population), 2):\n            if i + 1 &lt; len(selected_population):\n                child1 = crossover(selected_population[i], selected_population[i+1], crossover_rate)\n                child2 = crossover(selected_population[i+1], selected_population[i], crossover_rate)\n                new_population.extend([child1, child2])\n            else:\n                new_population.append(selected_population[i])\n        \n        population = np.array([mutate(ind, bounds, mutation_rate, delta) for ind in new_population])\n    \n    # Convertir la trayectoria a DataFrame\n    \n    columns = [f'x{i+1}' for i in range(dim)] + ['f(x)']\n    df = pd.DataFrame(trajectory, columns=columns)\n    return best_individual, fitness_function(best_individual), df, populations\n\n\n\n\nFunción de RosenbrockFunción de RastriginFunción de SchwefelFunción de GriewankFunción Goldstein-PriceFunción de las seis jorobas de camello\n\n\n\\[f(\\mathbf{x}) = \\sum_{i=1}^{d-1} \\left[ 100(x_{i+1} - x_i^2)^2 + (x_i - 1)^2 \\right]\\]\n\n\n\n\\[f(\\mathbf{x}) = 10d + \\sum_{i=1}^{d} \\left[ x_i^2 - 10 \\cos(2\\pi x_i) \\right]\\]\n\n\n\n\\[ f(\\mathbf{x}) = 418.9829d - \\sum_{i=1}^{d} x_i \\sin(\\sqrt{|x_i|}) \\]\n\n\n\n\\[ f(\\mathbf{x}) = 1 + \\frac{1}{4000} \\sum_{i=1}^{d} x_i^2 - \\prod_{i=1}^{d} \\cos\\left(\\frac{x_i}{\\sqrt{i}}\\right) \\]\n\n\n\n\\[\n\\begin{align}\nf(x_1, x_2) = & \\left[1 + (x_1 + x_2 + 1)^2 (19 - 14x_1 + 3x_1^2 - 14x_2 + 6x_1x_2 + 3x_2^2)\\right] \\\\\n         & \\left[30 + (2x_1 - 3x_2)^2 (18 - 32x_1 + 12x_1^2 + 48x_2 - 36x_1x_2 + 27x_2^2)\\right]\n\\end{align}\n\\]\n\n\n\n\\[ f(x_1, x_2) = \\left(4 - 2.1x_1^2 + \\frac{x_1^4}{3}\\right)x_1^2 + x_1x_2 + \\left(-4 + 4x_2^2\\right)x_2^2 \\]\n\n\n\n\nLos algoritmos genéticos convergen hacia soluciones aproximadas, aunque no garantizan alcanzar el óptimo global. Sin embargo, suelen mostrar una rápida convergencia en pocas generaciones. Estos algoritmos buscan equilibrar dos objetivos clave: Exploración, que consiste en descubrir nuevas regiones del espacio de búsqueda, y Explotación, enfocada en refinar y mejorar las soluciones existentes.\nPara las simulaciones presentadas en los GIF, se utilizaron los siguientes parámetros: tamaño de población = 30, número de generaciones = 20, tasa de mutación = 0.5, y tasa de cruce = 0.5. El parámetro de mutación \\(\\delta\\) se ajusta según los límites de evaluación de las funciones objetivo, representando aproximadamente un 5% del rango de dichas funciones.\n\n\n2.2.3 Observaciones\nVentajas:\n\nNo requiere derivadas ni condiciones específicas en $$$f(x)$ .\nEs efectivo en espacios de búsqueda multimodales o no convexos.\nAdaptable a diversos problemas.\n\nDesventajas:\n\nPuede ser computacionalmente costoso.\nNo garantiza convergencia al óptimo global.\nRequiere ajuste cuidadoso de parámetros."
  },
  {
    "objectID": "posts/post-with-code/index.html#optimización-de-partículas",
    "href": "posts/post-with-code/index.html#optimización-de-partículas",
    "title": "Métodos de optimización heurística",
    "section": "2.3 Optimización de partículas",
    "text": "2.3 Optimización de partículas\n\n2.3.1 Concepto Básico y Analogía\nLa Optimización por Enjambre de Partículas (PSO) es una técnica metaheurística inspirada en el comportamiento social de los animales, como los pájaros o los peces. En PSO, cada solución potencial al problema se representa como una partícula que se mueve en un espacio de búsqueda multidimensional. Cada partícula ajusta su posición y velocidad en cada iteración, basándose en su propia mejor posición encontrada (pBest) y la mejor posición encontrada por todo el enjambre (gBest). (Kennedy and Eberhart 1995)\nLos métodos PSO se atribuyen originalmente a los investigadores Kennedy, Eberhart​ y Shi. En un principio fueron concebidos para elaborar modelos de conductas sociales,​como el movimiento descrito por los organismos vivos en una bandada de aves o un banco de peces. Posteriormente el algoritmo se simplificó y se comprobó que era adecuado para problemas de optimización. (Kennedy 1997)\nFuncionamiento de PSOz\nEn el algoritmo PSO (Particle Swarm Optimization), cada partícula, que representa un individuo, posee una posición p⃗  ​ dentro del espacio de búsqueda y una velocidad v⃗ que determina su desplazamiento. Estas partículas, al igual que objetos en un entorno físico, cuentan con una inercia w, la cual conserva su movimiento en la dirección previamente seguida.\nself.positions = np.random.uniform(\n    self.bounds[:, 0],\n    self.bounds[:, 1],\n    size=(n_particles, dimensions)\n)\n\nself.velocities = np.zeros((n_particles, dimensions))\n\n# Evaluar posiciones iniciales\nself.scores = np.array([self.objective_function(p) for p in self.positions])\n\nAdemás, su aceleración, que representa un cambio en la velocidad, está influenciada por dos factores principales:\n\nAtracción hacia su mejor posición personal: Cada partícula tiende a moverse hacia la mejor ubicación que ha identificado en su trayectoria histórica (pbest).\nAtracción hacia la mejor posición global: Las partículas también se dirigen hacia la mejor ubicación encontrada por el grupo completo en el espacio de búsqueda (pgbest).\n\n\n(Sancho Caparrini 2024)\nfor iteration in range(self.max_iter):\n    # Actualizar velocidades\n    r1, r2 = np.random.rand(2)\n    self.velocities = (self.w * self.velocities +\n                     self.c1 * r1 * (self.p_best - self.positions) +\n                     self.c2 * r2 * (self.g_best - self.positions))\n    \n    # Actualizar posiciones\n    self.positions += self.velocities\n    \n    # Mantener partículas dentro de los límites\n    self.positions = np.clip(\n        self.positions,\n        self.bounds[:, 0],\n        self.bounds[:, 1]\n    )\n    \n    # Evaluar nuevas posiciones\n    self.scores = np.array([self.objective_function(p) for p in self.positions])\n    \n    # Actualizar mejores posiciones personales\n    improved_mask = self.scores &lt; self.p_best_scores\n    self.p_best[improved_mask] = self.positions[improved_mask]\n    self.p_best_scores[improved_mask] = self.scores[improved_mask]\n    \n    # Actualizar mejor posición global\n    min_score_idx = np.argmin(self.p_best_scores)\n    if self.p_best_scores[min_score_idx] &lt; self.g_best_score:\n        self.g_best = self.p_best[min_score_idx].copy()\n        self.g_best_score = self.p_best_scores[min_score_idx]\nEl algoritmo se detiene cuando se alcanza un número máximo de iteraciones, o cuando la mejora en la función objetivo es menor a un umbral predefinido.\nAl implementar el algoritmo, se presentó un comportamiento oscilatorio donde las partículas convergían inicialmente pero luego se dispersaban de manera repentina. El análisis reveló cuatro posibles causas: velocidades excesivas de las partículas, coeficientes de aprendizaje mal ajustados, peso de inercia estático y ausencia de un mecanismo de estabilización.\nLa solución implementada aborda estos problemas mediante cuatro modificaciones: Se  limitó la velocidad máxima al 10% del espacio de búsqueda para evitar saltos excesivos, se optimizaron los coeficientes cognitivo y social a un valor de 2.0 para balancear exploración y explotación, se implementó un peso de inercia dinámico que decrece linealmente de 0.9 a 0.4 durante la optimización y se añadió un factor de constricción calculado a partir de los coeficientes de aprendizaje para garantizar convergencia matemática.\n# Control de Velocidad Máxima\nv_max = 0.1 * (bounds[:, 1] - bounds[:, 0])\nvelocities = np.clip(velocities, -v_max, v_max)\n\n# Peso de Inercia Dinámico\nw = w_max - (w_max - w_min) * (iteracion / max_iter)\n\n# Factor de Constricción\nphi = c1 + c2\nchi = 2 / abs(2 - phi - np.sqrt(phi * phi - 4 * phi))\n\n# Parámetros Optimizados\nc1 = c2 = 2.0\nw_max = 0.9\nw_min = 0.4\nEstas modificaciones resultaron en una mejora significativa en la estabilidad del algoritmo, con una transición más suave entre las fases de exploración y explotación, y una convergencia más consistente hacia el óptimo global.\n\nFunción de RosenbrockFunción de RastriginFunción de SchwefelFunción de GriewankFunción Goldstein-PriceFunción de las seis jorobas de camello\n\n\n\\[f(\\mathbf{x}) = \\sum_{i=1}^{d-1} \\left[ 100(x_{i+1} - x_i^2)^2 + (x_i - 1)^2 \\right]\\]\n\n\n\n\\[f(\\mathbf{x}) = 10d + \\sum_{i=1}^{d} \\left[ x_i^2 - 10 \\cos(2\\pi x_i) \\right]\\]\n\n\n\n\\[ f(\\mathbf{x}) = 418.9829d - \\sum_{i=1}^{d} x_i \\sin(\\sqrt{|x_i|}) \\]\n\n\n\n\\[ f(\\mathbf{x}) = 1 + \\frac{1}{4000} \\sum_{i=1}^{d} x_i^2 - \\prod_{i=1}^{d} \\cos\\left(\\frac{x_i}{\\sqrt{i}}\\right) \\]\n\n\n\n\\[\n\\begin{align}\nf(x_1, x_2) = & \\left[1 + (x_1 + x_2 + 1)^2 (19 - 14x_1 + 3x_1^2 - 14x_2 + 6x_1x_2 + 3x_2^2)\\right] \\\\\n         & \\left[30 + (2x_1 - 3x_2)^2 (18 - 32x_1 + 12x_1^2 + 48x_2 - 36x_1x_2 + 27x_2^2)\\right]\n\\end{align}\n\\]\n\n\n\n\\[ f(x_1, x_2) = \\left(4 - 2.1x_1^2 + \\frac{x_1^4}{3}\\right)x_1^2 + x_1x_2 + \\left(-4 + 4x_2^2\\right)x_2^2 \\]"
  },
  {
    "objectID": "posts/post-with-code/index.html#optimización-diferencial",
    "href": "posts/post-with-code/index.html#optimización-diferencial",
    "title": "Métodos de optimización heurística",
    "section": "2.4 Optimización diferencial",
    "text": "2.4 Optimización diferencial\nFuncionamiento Básico\nLa Evolución Diferencial (ED) es un algoritmo de optimización poblacional inspirado en los procesos evolutivos naturales. Al igual que otros algoritmos de esta categoría, la ED mantiene una población de soluciones candidatas, las cuales se recombinan y mutan para producir nuevos individuos los cuales serán elegidos de acuerdo al valor de su función de desempeño. Lo que caracteriza a la ED es el uso de vectores de prueba, los cuales compiten con los individuos de la población actual a fin de sobrevivir. (Price and Storn 1995)\nPasos clave:\n\nInicialización de la población:\n\nSe genera aleatoriamente una población inicial de individuos (soluciones potenciales).\nCada individuo es un vector que representa un punto en el espacio de búsqueda.\ndef initialize_population(self):\n    \"\"\"\n    Inicializa la población de manera aleatoria dentro de los límites especificados\n\n    Returns:\n    - Matriz numpy con población inicial\n    \"\"\"\n    # Crea una matriz de ceros con el tamaño de la población\n    population = np.zeros((self.population_size, self.dimension))\n\n    # Genera valores aleatorios para cada dimensión\n    for i in range(self.dimension):\n        population[:, i] = np.random.uniform(\n            self.bounds[i][0],  # Límite inferior\n            self.bounds[i][1],  # Límite superior\n            size=self.population_size  # Número de individuos\n        )\n    return population\n\nEvaluación de la población:\n\nSe evalúa el valor de la función objetivo para cada individuo de la población\n\nGeneración de nuevos individuos:\n\nMutación: Se crea un vector mutante sumando a un individuo objetivo una diferencia escalada entre otros dos individuos de la población.\ndef mutation(self, population):\n    \"\"\"\n    Aplica la estrategia de mutación DE/rand/1\n\n    Parameters:\n    - population: Población actual\n\n    Returns:\n    - Población mutada\n    \"\"\"\n    # Crea una matriz para almacenar la población mutada\n    mutation_pop = np.zeros_like(population)\n\n    for i in range(self.population_size):\n        # Selecciona tres individuos aleatorios diferentes\n        candidates = list(range(self.population_size))\n        candidates.remove(i)\n        r1, r2, r3 = np.random.choice(candidates, 3, replace=False)\n\n        # Genera un nuevo vector mediante mutación\n        mutation_pop[i] = population[r1] + self.F * (population[r2] - \n                                                       population[r3])\n\n        # Asegura que los valores estén dentro de los límites\n        for j in range(self.dimension):\n            mutation_pop[i, j] = np.clip(\n                mutation_pop[i, j],\n                self.bounds[j][0],\n                self.bounds[j][1]\n            )\n\n    return mutation_pop\nCruce: Se crea un vector de prueba combinando el vector mutante y el individuo objetivo mediante un operador de cruce.\ndef crossover(self, population, mutation_pop):\n    \"\"\"\n    Aplica el cruce binomial (crossover)\n\n    Parameters:\n    - population: Población actual\n    - mutation_pop: Población mutada\n\n    Returns:\n    - Población de prueba tras el cruce\n    \"\"\"\n    # Crea una matriz para almacenar la población de prueba\n    trial_pop = np.zeros_like(population)\n\n    for i in range(self.population_size):\n        # Genera puntos de cruce basados en CR\n        cross_points = np.random.rand(self.dimension) &lt;= self.CR\n        # Asegura al menos un punto de cruce\n        cross_points[np.random.randint(0, self.dimension)] = True\n\n        # Genera vector de prueba\n        trial_pop[i] = np.where(cross_points, mutation_pop[i], population[i])\n\n    return trial_pop\n\nSelección: Se compara el valor de la función objetivo del vector de prueba con el del individuo objetivo. El mejor de los dos se selecciona para la siguiente generación.\n\nCriterio de parada:\n\nSe repiten los pasos 3 y 4 hasta que se cumpla un criterio de parada (número máximo de generaciones, mejora mínima en la función objetivo, etc.)\n(Martínez Zecua et al. 2019)\n\n\n\nFunción de RosenbrockFunción de RastriginFunción de SchwefelFunción de GriewankFunción Goldstein-PriceFunción de las seis jorobas de camello\n\n\n\\[f(\\mathbf{x}) = \\sum_{i=1}^{d-1} \\left[ 100(x_{i+1} - x_i^2)^2 + (x_i - 1)^2 \\right]\\]\n\n\n\n\\[f(\\mathbf{x}) = 10d + \\sum_{i=1}^{d} \\left[ x_i^2 - 10 \\cos(2\\pi x_i) \\right]\\]\n\n\n\n\\[ f(\\mathbf{x}) = 418.9829d - \\sum_{i=1}^{d} x_i \\sin(\\sqrt{|x_i|}) \\]\n\n\n\n\\[ f(\\mathbf{x}) = 1 + \\frac{1}{4000} \\sum_{i=1}^{d} x_i^2 - \\prod_{i=1}^{d} \\cos\\left(\\frac{x_i}{\\sqrt{i}}\\right) \\]\n\n\n\n\\[ \\begin{align} f(x_1, x_2) = & \\left[1 + (x_1 + x_2 + 1)^2 (19 - 14x_1 + 3x_1^2 - 14x_2 + 6x_1x_2 + 3x_2^2)\\right] \\\\          & \\left[30 + (2x_1 - 3x_2)^2 (18 - 32x_1 + 12x_1^2 + 48x_2 - 36x_1x_2 + 27x_2^2)\\right] \\end{align} \\]\n\n\n\n\\[ f(x_1, x_2) = \\left(4 - 2.1x_1^2 + \\frac{x_1^4}{3}\\right)x_1^2 + x_1x_2 + \\left(-4 + 4x_2^2\\right)x_2^2 \\]"
  },
  {
    "objectID": "posts/post-with-code/index.html#problema-del-viajero",
    "href": "posts/post-with-code/index.html#problema-del-viajero",
    "title": "Métodos de optimización heurística",
    "section": "5.1 Problema del Viajero:",
    "text": "5.1 Problema del Viajero:\nUn vendedor debe realizar un recorrido por todas las capitales de los 32 estados de los Estados Unidos Mexicanos.\n\n5.1.1 Tareas:\n\nOptimización con métodos metaheurísticos:\n\nUtilice colonias de hormigas para encontrar el orden óptimo del recorrido.\nUtilice algoritmos genéticos para encontrar el orden óptimo del recorrido.\n\nCosto del recorrido:\n\nEl costo de desplazamiento entre ciudades se calcula como la suma de:\n\nEl valor de la hora del vendedor (este es un parámetro que debe estudiarse).\nEl costo de los peajes.\nEl costo del combustible.\n\nCada equipo debe definir el vehículo que utilizará el vendedor para realizar el recorrido y, con base en esta elección, calcular el costo del combustible.\n\n\n\n\n5.1.2 Representación Visual:\n\nCree un GIF animado o un video que muestre cómo se comporta la mejor solución encontrada, usando un gráfico del recorrido en el mapa de México.\n\n\n\n\n5.1.3 Discusión:\nReflexione sobre: - Los resultados obtenidos con las colonias de hormigas y los algoritmos genéticos. - Comparación de costos y tiempo de ejecución."
  },
  {
    "objectID": "posts/post-with-code/index.html#footnotes",
    "href": "posts/post-with-code/index.html#footnotes",
    "title": "Métodos de optimización heurística",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nEl fitness representa la aptitud o adecuación de una solución a un problema específico. En nuestro caso, representa la evaluación del individuo en la funcion objetivo.↩︎"
  },
  {
    "objectID": "posts/post-with-code/index.html#section",
    "href": "posts/post-with-code/index.html#section",
    "title": "Métodos de optimización heurística",
    "section": "2.5 ",
    "text": "2.5"
  }
]