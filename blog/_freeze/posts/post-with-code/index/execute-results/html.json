{
  "hash": "b5531bc984be8bed5ee9f508b6b305b1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Métodos de optimización heurística\"\nformat: \n  html:\n    fig-width: 8      # Ancho de las figuras en pulgadas para HTML\n    fig-height: 6     # Alto de las figuras en pulgadas para HTML\n    number-sections: true\nauthor:\n  - name: \"Julián Castaño Pineda\"\n  - name: \"Luis Andrés Altamar Romero\"\n  - name: \"Catalina Restrepo Salgado\"\n  - name: \"Tomás Rodríguez Taborda\"\ndate: \"2024-11-15\"\ncategories: [optimización, métodos heurísticos, python]\nimage: \"image.jpg\"\nbibliography: ref.bib\n---\n\n::: {#c46c6775 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.animation import FuncAnimation\nfrom IPython.display import HTML\nfrom IPython.display import display\nfrom IPython.display import Image as IPImage\nimport io\nfrom PIL import Image\n```\n:::\n\n\nEl objetivo de esta sección es evaluar diversos métodos de optimización aplicados a varias funciones, con el fin de medir su rendimiento. En particular, se utilizarán las funciones de Rosenbrock, Schwefel, Griewank, Goldstein-Price y la función de las seis jorobas de camello. Estas funciones serán optimizadas mediante el método del gradiente descendente y tres algoritmos heurísticos: Algoritmos Evolutivos, Optimización por Enjambre de Partículas y Evolución Diferencial.\n\nAl final, se comentará sobre los aportes de los métodos de descenso por gradiente y los métodos heurísticos, considerando el valor final de la función objetivo y el número de evaluaciones de la función objetivo, en un entorno de simulación con varios parámetros y condiciones para garantizar conclusiones significativas.\n\n# Funciones a optimizar\n\nSe seleccionaron seis funciones comúnmente empleadas para evaluar métodos de optimización, debido a sus características particulares. Estas funciones presentan desafíos como la existencia de un mínimo global acompañado de múltiples mínimos locales, así como valles que pueden dificultar la convergencia de los algoritmos. A continuación, se describen dichas funciones, incluyendo su forma funcional generalizada para $d$ dimensiones, su representación gráfica en 2 dimensiones, el valor del mínimo global, una breve descripción de cada función y el rango de evaluación sugerido por diversos autores. Las gráficas fueron generadas a partir de la funcion `plot_function()` que se muestra en la pestaña de `Code` sugerida.\n\n::: {#fed6fa15 .cell execution_count=2}\n``` {.python .cell-code}\ndef plot_function(f, x1_range, x2_range, title=\"Function Plot\", x1_point=None, x2_point=None, elev=30, azim=45 ):\n    x1 = np.linspace(x1_range[0], x1_range[1], 400)\n    x2 = np.linspace(x2_range[0], x2_range[1], 400)\n    X1, X2 = np.meshgrid(x1, x2)\n    Z = f(np.array([X1,X2]))\n\n    fig = plt.figure(figsize=(8, 4))\n\n    # 3D plot\n    ax1 = fig.add_subplot(121, projection='3d')\n    ax1.plot_surface(X1, X2, Z)\n    ax1.set_title(f'3D Plot of {title}')\n    ax1.set_xlabel('X1')\n    ax1.set_ylabel('X2')\n    ax1.set_zlabel('Z')\n\n    ax1.view_init(elev=elev, azim=azim)\n\n    if x1_point is not None and x2_point is not None:\n        z_point = f(np.array([x1_point, x2_point])[:, None, None])[0, 0]\n\n        ax1.plot([x1_point], [x2_point], [z_point], color='r', marker='o', markersize=5, linewidth=0, label=\"Mínimo global\", zorder=5)\n        ax1.legend()\n\n    # Contour plot\n    ax2 = fig.add_subplot(122)\n    contour = ax2.contour(X1, X2, Z, levels = 10)\n    ax2.set_title(f'Contour Plot of {title}')\n    ax2.set_xlabel('X1')\n    ax2.set_ylabel('X2')\n    fig.colorbar(contour, ax=ax2)\n\n    if x1_point is not None and x2_point is not None:\n        ax2.plot([x1_point], [x2_point], color='r', marker='o', markersize=5, linewidth=0, label=\"Mínimo global\", zorder=5)\n        ax2.legend()\n\n    plt.show()\n```\n:::\n\n\n::: panel-tabset\n## Función de Rosenbrock\n\n$$f(\\mathbf{x}) = \\sum_{i=1}^{d-1} \\left[ 100(x_{i+1} - x_i^2)^2 + (x_i - 1)^2 \\right]$$\n\n::: {#e59a9135 .cell height='auto' width='100%' execution_count=3}\n``` {.python .cell-code}\n# Función de Rosenbrock\ndef rosenbrock(x, a=1, b=100):\n    \"\"\"\n    Calcula el valor de la función de Rosenbrock.\n    x: vector de entrada (numpy array)\n    a, b: parámetros de la función\n    \"\"\"\n    return (sum(b * (x[1:] - x[:-1]**2)**2 + (x[:-1] - a)**2))\n\nplot_function(rosenbrock, x1_range=(-2.048, 2.048), x2_range=(-2.048, 2.048), title=\"Función Rosenbrock\", x1_point=1, x2_point=1)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=661 height=376}\n:::\n:::\n\n\nEn 2 dimensiones se puede definir como $$ f(x_1, x_2) = (a - x_1)^2 + b(x_2 - x_1^2)^2 $$\n\nLa Función de Rosenbrock, también conocida como función del valle o del plátano, es ampliamente utilizada para evaluar algoritmos de optimización basados en gradientes. Esta función es unimodal y presenta su mínimo global en un valle parabólico estrecho, lo que facilita su localización. Sin embargo, segun @simonfraser_rosenbrock citando a @picheny2012benchmark convergencia hacia este mínimo puede ser desafiante debido a la naturaleza del valle.\n\nLa función se evalúa generalmente en el hipercubo $x_i \\in [-5, 10]$ y tiene un mínimo global en $f(1,...,1) = 0$\n\n## Función de Rastrigin\n\n$$f(\\mathbf{x}) = 10d + \\sum_{i=1}^{d} \\left[ x_i^2 - 10 \\cos(2\\pi x_i) \\right]$$\n\n::: {#454af2b1 .cell execution_count=4}\n``` {.python .cell-code}\n# Función de Rastrigin\ndef rastrigin(x):\n    \"\"\"\n    Calcula el valor de la función de Rastrigin.\n    x: vector de entrada (numpy array)\n    \"\"\"\n    d = len(x)\n    return 10 * d + sum(x**2 - 10 * np.cos(2 * np.pi * x))\nplot_function(rastrigin, x1_range=(-5.12, 5.12), x2_range=(-5.12, 5.12), title=\"Función Rastrigin\", x1_point=0, x2_point=0)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=638 height=377}\n:::\n:::\n\n\nSegun @simonfraser_rosenbrock, la función de Rastrigin tiene varios mínimos locales. Es altamente multimodal, pero las ubicaciones de los mínimos se distribuyen regularmente. La función generalmente se evalúa en el hipercubo $x_i \\in [-5.12, 5.12]$ y su mínimo local se encuentra en $f(0,...,0)=0$.\n\n## Función de Schwefel\n\n$$ f(\\mathbf{x}) = 418.9829d - \\sum_{i=1}^{d} x_i \\sin(\\sqrt{|x_i|}) $$\n\n::: {#ee204193 .cell execution_count=5}\n``` {.python .cell-code}\n# Función de Schwefel\ndef schwefel(x):\n    \"\"\"\n    Calcula el valor de la función de Schwefel.\n    x: vector de entrada (numpy array)\n    \"\"\"\n    d = len(x)\n    return 418.9829 * d - sum(x * np.sin(np.sqrt(np.abs(x))))\nplot_function(schwefel, x1_range=(-500, 500), x2_range=(-500, 500), title=\"Función Schwefel\", x1_point=420.9687, x2_point=420.9687)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=662 height=376}\n:::\n:::\n\n\nSegun @simonfraser_rosenbrock La función de Schwefel es compleja, con muchos mínimos locales. Normalmente se evalua en el hipercubo $x_i \\in [-500,500]$. Su minimo global está en $f(420.9687,...,420.9687)=0$\n\n## Función de Griewank\n\n$$ f(\\mathbf{x}) = 1 + \\frac{1}{4000} \\sum_{i=1}^{d} x_i^2 - \\prod_{i=1}^{d} \\cos\\left(\\frac{x_i}{\\sqrt{i}}\\right) $$\n\n::: {#a3f7fe90 .cell execution_count=6}\n``` {.python .cell-code}\n# Función de Griewank\ndef griewank(x):\n    \"\"\"\n    Calcula el valor de la función Griewank.\n    x: numpy array unidimensional (1D) o un array con forma (d, n1, n2) para evaluaciones vectorizadas.\n    \n    Retorna:\n    - Un valor escalar si `x` es 1D.\n    - Una matriz (n1, n2) si `x` tiene forma (d, n1, n2).\n    \"\"\"\n    x = np.asarray(x)\n\n    if x.ndim == 1:\n        # Caso 1D: calcular para un solo vector\n        d = len(x)\n        sum_term = np.sum(x**2) / 4000\n        product_term = np.prod(np.cos(x / np.sqrt(np.arange(1, d + 1))))\n        return 1 + sum_term - product_term\n\n    elif x.ndim == 3:\n        # Caso ND: calcular para una cuadrícula (vectorizado)\n        d = x.shape[0]\n        i_indices = np.arange(1, d + 1).reshape(-1, 1, 1)\n        sum_term = np.sum(x**2, axis=0) / 4000\n        product_term = np.prod(np.cos(x / np.sqrt(i_indices)), axis=0)\n        return 1 + sum_term - product_term\n\n    else:\n        raise ValueError(\"La entrada debe ser un array 1D o un array con forma (d, n1, n2).\")\nplot_function(griewank, x1_range=(-600, 600), x2_range=(-600, 600), title=\"Función Griewank\", x1_point=0, x2_point=0)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=649 height=376}\n:::\n:::\n\n\nSegun @simonfraser_rosenbrock la función de Griewank tiene muchos mínimos locales generalizados, que se distribuyen de forma regular. Lo que hace compleja su optimización al minimo global. Normalmente se evalua en el hipercubo $x_i \\in [-600,600]$. Su minimo global está en $f(0,...,0)=0$\n\n## Función Goldstein-Price\n\n$$\n\\begin{align}\nf(x_1, x_2) = & \\left[1 + (x_1 + x_2 + 1)^2 (19 - 14x_1 + 3x_1^2 - 14x_2 + 6x_1x_2 + 3x_2^2)\\right] \\\\\n         & \\left[30 + (2x_1 - 3x_2)^2 (18 - 32x_1 + 12x_1^2 + 48x_2 - 36x_1x_2 + 27x_2^2)\\right]\n\\end{align}\n$$\n\n::: {#0083abdf .cell execution_count=7}\n``` {.python .cell-code}\n# Función Goldstein-Price\ndef goldstein_price(x):\n    \"\"\"\n    Calcula el valor de la función Goldstein-Price.\n    x1, x2: coordenadas en 2D\n    \"\"\"\n    x1=x[0]\n    x2=x[1]\n    term1 = (1 + (x1 + x2 + 1)**2 * (19 - 14 * x1 + 3 * x1**2 - 14 * x2 + 6 * x1 * x2 + 3 * x2**2))\n    term2 = (30 + (2 * x1 - 3 * x2)**2 * (18 - 32 * x1 + 12 * x1**2 + 48 * x2 - 36 * x1 * x2 + 27 * x2**2))\n    return term1 * term2\nplot_function(goldstein_price, x1_range=(-2, 2), x2_range=(-2, 2), title=\"Función Goldstein price\", x1_point=0, x2_point=-1)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=644 height=377}\n:::\n:::\n\n\nLa función Goldstein-Price es una función en 2 dimensiones y tiene varios mínimos locales. Segun @molga2005test, la función generalmente se evalúa en el cuadrado $x_1 \\in [-2, 2]$ y $x_1 \\in [-2, 2]$ . Su mínimo global es $f(0,-1) = 3$\n\n## Función de las seis jorobas de camello\n\n$$ f(x_1, x_2) = \\left(4 - 2.1x_1^2 + \\frac{x_1^4}{3}\\right)x_1^2 + x_1x_2 + \\left(-4 + 4x_2^2\\right)x_2^2 $$\n\n::: {#54460845 .cell execution_count=8}\n``` {.python .cell-code}\n# Función de las seis jorobas de camello\ndef camel_six_humps(x):\n    \"\"\"\n    Calcula el valor de la función de las seis jorobas de camello.\n    x1, x2: coordenadas en 2D\n    \"\"\"\n    x1 = x[0]\n    x2 = x[1]\n    term1 = (4 - 2.1 * x1**2 + x1**4 / 3) * x1**2\n    term2 = x1 * x2\n    term3 = (-4 + 4 * x2**2) * x2**2\n    return term1 + term2 + term3\nplot_function(camel_six_humps, x1_range=(-2, 2), x2_range=(-1, 1), title=\"Función 6 jorobas de camello\", x1_point=0.0898, x2_point=-0.7126, elev=30, azim=75 )\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=654 height=377}\n:::\n:::\n\n\nLa función de las seis jorobas de camello es una función en 2 dimensiones.Segun @molga2005test la función tiene seis mínimos locales, dos de los cuales son globales y recomienda evaluar la función en el rectángulo $x_1 \\in [-3, 3], x_2 \\in [-2, 2]$, donde los mínimos globales son $f(0.0898,-0.7126) = -1.0316$ y $f(-0.0898, 0.7126) = -1.0316$\n:::\n\n# Proceso de optimización\n\n## Optimización por descenso del gradiente\n\nEl descenso del gradiente es un algoritmo de optimización iterativo que busca encontrar el mínimo local de una función diferenciable. La idea principal es moverse en la dirección opuesta al gradiente de la función en cada punto, ya que el gradiente apunta en la dirección de máximo crecimiento.\n\nSegun [@bishop2006pattern], para una función $f(x)$, el algoritmo actualiza iterativamente el punto $x$ usando la regla:\n\n$$ x_{t+1} = x_t - \\eta \\nabla f(x_t) $$\n\ndonde:\n\n-   $x_t$ es el punto actual\n\n-   $\\eta$ es la tasa de aprendizaje\n\n-   $\\nabla f(x_t)$ es el gradiente de la función en $x_t$\n\nEl gradiente $\\nabla f$ es un vector que contiene las derivadas parciales respecto a cada variable: $$\\nabla f(x_1, x_2) = \\begin{bmatrix} \\frac{\\partial f}{\\partial x_1}, \\frac{\\partial f}{\\partial x_2} \\end{bmatrix}$$\n\nEl gradiente $\\nabla f$ se puede aproximar numéricamente usando diferencias finitas. [@bishop2006pattern] plantean que, se puede mejorar consideramblemente la presición del método usando diferencias centrales simétricas. En este caso, para una función $f(x_1, x_2)$, las derivadas parciales se calculan como:\n\n$$ \\frac{\\partial f}{\\partial x_1} \\approx \\frac{f(x_1 + h, x_2) - f(x_1 - h, x_2)}{2h} $$\n\n$$ \\frac{\\partial f}{\\partial x_2} \\approx \\frac{f(x_1, x_2 + h) - f(x_1, x_2 - h)}{2h} $$\n\ndonde $h$ es un pequeño incremento (típicamente $10^{-7}$ o $10^{-8}$).\n\n::: {#ab8ce2d3 .cell execution_count=9}\n``` {.python .cell-code}\ndef partial_derivative(x0, func, i, h, *args):\n  e = np.zeros(len(x0))\n  e[i] = 1\n  return (func(x0+h*e, *args) - func(x0-h*e, *args))/(2*h)\n\ndef numerical_gradient(x0, func, h, *args):\n  gradient = np.zeros(len(x0))\n  for i in range(len(x0)):\n    gradient[i] = partial_derivative(x0, func, i, h, *args)\n  return gradient\n\ndef gradient_descent_num_dev_mult(x0, eta, func, h, max_iter, *args):\n  \"\"\"\n  Perform gradient descent with numerical derivatives for a multi-dimensional function.\n\n  Parameters:\n      x0 (array-like): Initial guess for the variables.\n      eta (float): Learning rate.\n      func (callable): Function to minimize.\n      h (float): Step size for numerical gradient calculation.\n      max_iter (int): Maximum number of iterations.\n      *args: Additional arguments for the function.\n\n  Returns:\n      result_df (pd.DataFrame): DataFrame with columns ['x1', 'x2', 'f(x1,x2)']\n                                containing the trajectory of points.\n  \"\"\"\n  x_old = np.array(x0)\n  x_hist = []  # List to store the history of x and f(x)\n\n  for i in range(max_iter):\n      # Calculate the gradient numerically\n      gradient = numerical_gradient(x_old, func, h, *args)\n\n      # Update x based on gradient descent rule\n      x_new = x_old - eta * gradient\n\n      # Append current x and function value to history\n      x_hist.append([x_old[0], x_old[1], func(x_old, *args)])\n\n      # Update x_old\n      x_old = x_new\n\n  # Add the final position and function value\n  x_hist.append([x_new[0], x_new[1], func(x_new, *args)])\n\n  # Convert history to a pandas DataFrame\n  result_df = pd.DataFrame(x_hist, columns=['x1', 'x2', 'f(x1,x2)'])\n\n  return result_df\n```\n:::\n\n\nA continuación, se presentan las animaciones que ilustran la aplicación del descenso del gradiente en las seis funciones evaluadas. Los parámetros iniciales, la tasa de aprendizaje y el número de iteraciones del algoritmo fueron seleccionados cuidadosamente para optimizar la visualización del funcionamiento del método.Estos parámetros se detallan en las tablas a continuación.\n\n::: panel-tabset\n### Función de Rosenbrock\n\n$$f(\\mathbf{x}) = \\sum_{i=1}^{d-1} \\left[ 100(x_{i+1} - x_i^2)^2 + (x_i - 1)^2 \\right]$$\n\n| $x_{1_0}$ | $x_{2_0}$ | $\\eta$ | $n$ |\n|-----------|-----------|--------|-----|\n| -1.5      | -1.7      | 0.001  | 30  |\n\n![](rosenbrock.gif)\n\n### Función de Rastrigin\n\n$$f(\\mathbf{x}) = 10d + \\sum_{i=1}^{d} \\left[ x_i^2 - 10 \\cos(2\\pi x_i) \\right]$$\n\n| $x_{1_0}$ | $x_{2_0}$ | $\\eta$ | $n$ |\n|-----------|-----------|--------|-----|\n| -0.46     | 0.46      | 0.005  | 30  |\n\n![](rastrigin.gif)\n\n### Función de Schwefel\n\n$$ f(\\mathbf{x}) = 418.9829d - \\sum_{i=1}^{d} x_i \\sin(\\sqrt{|x_i|}) $$\n\n| $x_{1_0}$ | $x_{2_0}$ | $\\eta$ | $n$ |\n|-----------|-----------|--------|-----|\n| 310       | 310       | 0.8    | 30  |\n\n![](schwefel.gif)\n\n### Función de Griewank\n\n$$ f(\\mathbf{x}) = 1 + \\frac{1}{4000} \\sum_{i=1}^{d} x_i^2 - \\prod_{i=1}^{d} \\cos\\left(\\frac{x_i}{\\sqrt{i}}\\right) $$\n\n| $x_{1_0}$ | $x_{2_0}$ | $\\eta$ | $n$ |\n|-----------|-----------|--------|-----|\n| -500      | 500       | 70     | 33  |\n\n![](griewank.gif)\n\n### Función Goldstein-Price\n\n$$\n\\begin{align}\nf(x_1, x_2) = & \\left[1 + (x_1 + x_2 + 1)^2 (19 - 14x_1 + 3x_1^2 - 14x_2 + 6x_1x_2 + 3x_2^2)\\right] \\\\\n         & \\left[30 + (2x_1 - 3x_2)^2 (18 - 32x_1 + 12x_1^2 + 48x_2 - 36x_1x_2 + 27x_2^2)\\right]\n\\end{align}\n$$\n\n| $x_{1_0}$ | $x_{2_0}$ | $\\eta$  | $n$ |\n|-----------|-----------|---------|-----|\n| 0.5       | -1.5      | 0.00005 | 50  |\n\n![](goldstein_price.gif)\n\n### Función de las seis jorobas de camello\n\n$$ f(x_1, x_2) = \\left(4 - 2.1x_1^2 + \\frac{x_1^4}{3}\\right)x_1^2 + x_1x_2 + \\left(-4 + 4x_2^2\\right)x_2^2 $$\n\n| $x_{1_0}$ | $x_{2_0}$ | $\\eta$ | $n$ |\n|-----------|-----------|--------|-----|\n| -1        | -1        | 0.015  | 33  |\n\n![](camel_six_humps.gif)\n:::\n\nEl método del gradiente descendente puede imaginarse como una persona deslizándose por una colina representada por una función. El punto de inicio es el lugar desde donde comienza a deslizarse, y la tasa de aprendizaje actúa como la aceleración que controla la velocidad del deslizamiento en cada paso. Si esta aceleración es demasiado alta, puede ayudar a llegar más rápido al valle más bajo, pero también existe el riesgo de salir del camino o incluso terminar subiendo una colina debido a un impulso excesivo que sobrepasa el objetivo.\n\nPara garantizar que este método sea eficiente, es importante considerar lo siguiente:\n\n-   **Tasa de aprendizaje**: Un valor demasiado grande puede causar divergencia, mientras que uno muy pequeño puede hacer que el proceso sea extremadamente lento.\n\n-   **Punto inicial**: La ubicación inicial afecta la trayectoria y la probabilidad de alcanzar el mínimo global.\n\n-   **Criterio de parada**: Es esencial definir cuándo detener el algoritmo, ya sea por alcanzar un número máximo de iteraciones o porque la mejora entre pasos sea insignificante (convergencia).\n\n## Agoritmo genético\n\nUn algoritmo genético (GA) es un método heurístico de optimización inspirado en los principios de la **selección natural** y la **evolución biológica**, propuesto inicialmente por [@holland1975adaptation]. Este enfoque busca soluciones óptimas en un espacio de búsqueda utilizando una población de candidatos.\n\n### Concepto General\n\nEl algoritmo genético simula el proceso evolutivo a través de las siguientes etapas:\n\n-   **Selección**: Elegir individuos con mayor *fitness*.[^1]\n\n-   **Cruce**: Combinar soluciones para generar descendencia.\n\n-   **Mutación**: Introducir variación genética.\n\n[^1]: El *fitness* representa la aptitud o adecuación de una solución a un problema específico. En nuestro caso, representa la evaluación del individuo en la funcion objetivo.\n\nMatemáticamente, en un problema de minimización, el objetivo es encontrar:\n\n$$ x^* = \\arg\\min_{x \\in \\mathbb{R}^n} f(x) $$\n\ndonde:\n\n-   $x$ representa un individuo en el espacio de búsqueda.\n-   $f(x)$ es la función objetivo que evalúa la calidad de $x$.\n\nCada solución candidata se representa como un **individuo**, que puede ser un vector real o un cromosoma binario:\n\n$$x = (x_1, x_2, \\ldots, x_n) \\in \\mathbb{R}^n$$\n\nLa función objetivo mide qué tan buena es una solución:\n\n$$\\text{Fitness}(x) = f(x)$$\n\nPara problemas de **minimización**, menor $f(x)$ implica mejor fitness.\n\n------------------------------------------------------------------------\n\n### Etapas\n\n**Inicialización de la Población**\n\nSe genera una población inicial de $P$ individuos de forma aleatoria dentro de un intervalo $[a, b]$ :\n\n$$x_{ij} \\sim \\text{U}(a, b), \\quad \\forall i \\in \\{1, 2, \\ldots, P\\}, \\; j \\in \\{1, 2, \\ldots, n\\}$$ donde:\n\n-   $x_{ij}$ es la $j-ésima$ coordenada del $i-ésimo$ individuo.\n\n::: {#429d2ce7 .cell execution_count=10}\n``` {.python .cell-code}\n# Inicializar población\ndef initialize_population(size, dim, bounds):\n    return np.random.uniform(bounds[0], bounds[1], (size, dim))\n```\n:::\n\n\n------------------------------------------------------------------------\n\n**Evaluación del Fitness**\n\nCada individuo de la población es evaluado usando la función objetivo:\n\n$\\text{Fitness}_i = f(x_i)$\n\n::: {#c10cfa40 .cell execution_count=11}\n``` {.python .cell-code}\n# Evaluar fitness\ndef evaluate_fitness(population,fitness_function):\n    return np.array([fitness_function(ind) for ind in population])\n```\n:::\n\n\n------------------------------------------------------------------------\n\n**Selección**\n\nSe seleccionan individuos para reproducirse basándose en su fitness. Un métodos comune es el método de torneo, donde primero se seleccionan $k$ individuos al azar y luego se elige al mejor de ellos(mejor fitness):\n\n$$\\text{Individuo seleccionado} = \\arg\\min_{j \\in S} \\text{Fitness}_j, \\; S \\subseteq \\{1, \\ldots, P\\}, \\; |S| = k$$\n\n::: {#815217a5 .cell execution_count=12}\n``` {.python .cell-code}\n# Selección por torneo\ndef tournament_selection(population, fitness, k=3):\n    selected = []\n    for _ in range(len(population)):\n        candidates = np.random.choice(range(len(population)), k, replace=False)\n        winner = candidates[np.argmin(fitness[candidates])]\n        selected.append(population[winner])\n    return np.array(selected)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n**Cruce (Recombinación)**\n\nDos individuos (padres) se combinan para generar descendencia. Un método común es **punto de corte único**, donde: 1. Se Elegie un punto de cruce aleatorio $k$. 2. Se genera la descendencia mezclando las características de los padres.\n\n$$\\text{Hijo 1} = (\\text{Padre}_1[:k], \\text{Padre}_2[k:])$$\n\n$$\\text{Hijo 2} = (\\text{Padre}_2[:k], \\text{Padre}_1[k:])$$\n\nLa probabilidad de realizar un cruce está determinada por $p_c$ (tasa de cruce).\n\n::: {#650a717a .cell execution_count=13}\n``` {.python .cell-code}\n# Cruce\ndef crossover(parent1, parent2, crossover_rate):\n    if np.random.rand() < crossover_rate:\n        point = np.random.randint(1, len(parent1))\n        child = np.concatenate([parent1[:point], parent2[point:]])\n        return child\n    return parent1 if np.random.rand() < 0.5 else parent2\n```\n:::\n\n\n------------------------------------------------------------------------\n\n**Mutación**\n\nSe introduce una variación genética al modificar aleatoriamente uno o más genes(variables) en un individuo(punto del plano) con probabilidad $p_m$:\n\n$$x_{ij} = x_{ij} + \\Delta, \\quad \\Delta \\sim \\text{U}(-\\delta, \\delta)$$\n\ndonde:\n\n-   $\\Delta$ es una perturbación aleatoria.\n-   $x_{ij}$ se restringe a los límites del problema.\n\n::: {#e2535eca .cell execution_count=14}\n``` {.python .cell-code}\n# Mutación\ndef mutate(individual, bounds, mutation_rate, delta):\n    for i in range(len(individual)):\n        if np.random.rand() < mutation_rate:\n            individual[i] += np.random.uniform(-delta, delta)\n            individual[i] = np.clip(individual[i], bounds[0], bounds[1])\n    return individual\n```\n:::\n\n\n------------------------------------------------------------------------\n\n**Evaluación y Sustitución**\n\nLa nueva población es evaluada, y mediante el uso de elitismo, es posible conservar a los mejores individuos. El algoritmo continúa iterando con esta población actualizada, mejorando progresivamente la optimización de la función objetivo al incrementar el fitness general de la población.\n\n::: {#ac4930c3 .cell execution_count=15}\n``` {.python .cell-code}\n# Algoritmo completo\ndef genetic_algorithm(fitness_function, population_size, generations, mutation_rate, crossover_rate, dim, bounds, delta):\n    population = initialize_population(population_size, dim, bounds)\n    best_individual = None\n    trajectory = []\n    populations = []\n\n    for generation in range(generations):\n        populations.append(population.copy())\n        fitness = evaluate_fitness(population, fitness_function)\n        \n        if best_individual is None or np.min(fitness) < fitness_function(best_individual):\n            best_individual = population[np.argmin(fitness)]\n        \n        # Guardar la mejor solución de esta generación\n        trajectory.append((*best_individual, fitness_function(best_individual)))\n        \n        # Selección\n        selected_population = tournament_selection(population, fitness)\n        \n        # Cruce y mutación\n        new_population = []\n        for i in range(0, len(selected_population), 2):\n            if i + 1 < len(selected_population):\n                child1 = crossover(selected_population[i], selected_population[i+1], crossover_rate)\n                child2 = crossover(selected_population[i+1], selected_population[i], crossover_rate)\n                new_population.extend([child1, child2])\n            else:\n                new_population.append(selected_population[i])\n        \n        population = np.array([mutate(ind, bounds, mutation_rate, delta) for ind in new_population])\n    \n    # Convertir la trayectoria a DataFrame\n    \n    columns = [f'x{i+1}' for i in range(dim)] + ['f(x)']\n    df = pd.DataFrame(trajectory, columns=columns)\n    return best_individual, fitness_function(best_individual), df, populations\n```\n:::\n\n\n------------------------------------------------------------------------\n\n::: panel-tabset\n### Función de Rosenbrock\n\n$$f(\\mathbf{x}) = \\sum_{i=1}^{d-1} \\left[ 100(x_{i+1} - x_i^2)^2 + (x_i - 1)^2 \\right]$$\n\n![](Rosenbrock_population_animation.gif)\n\n### Función de Rastrigin\n\n$$f(\\mathbf{x}) = 10d + \\sum_{i=1}^{d} \\left[ x_i^2 - 10 \\cos(2\\pi x_i) \\right]$$\n\n![](Rastrigin_population_animation.gif)\n\n### Función de Schwefel\n\n$$ f(\\mathbf{x}) = 418.9829d - \\sum_{i=1}^{d} x_i \\sin(\\sqrt{|x_i|}) $$\n\n![](Schwefel_population_animation.gif)\n\n### Función de Griewank\n\n$$ f(\\mathbf{x}) = 1 + \\frac{1}{4000} \\sum_{i=1}^{d} x_i^2 - \\prod_{i=1}^{d} \\cos\\left(\\frac{x_i}{\\sqrt{i}}\\right) $$\n\n![](Griewank_population_animation.gif)\n\n### Función Goldstein-Price\n\n$$\n\\begin{align}\nf(x_1, x_2) = & \\left[1 + (x_1 + x_2 + 1)^2 (19 - 14x_1 + 3x_1^2 - 14x_2 + 6x_1x_2 + 3x_2^2)\\right] \\\\\n         & \\left[30 + (2x_1 - 3x_2)^2 (18 - 32x_1 + 12x_1^2 + 48x_2 - 36x_1x_2 + 27x_2^2)\\right]\n\\end{align}\n$$\n\n![](Goldstein_Price_population_animation.gif)\n\n### Función de las seis jorobas de camello\n\n$$ f(x_1, x_2) = \\left(4 - 2.1x_1^2 + \\frac{x_1^4}{3}\\right)x_1^2 + x_1x_2 + \\left(-4 + 4x_2^2\\right)x_2^2 $$\n\n![](Camel_Six_Humps_population_animation.gif)\n:::\n\nLos algoritmos genéticos convergen hacia soluciones aproximadas, aunque no garantizan alcanzar el óptimo global. Sin embargo, suelen mostrar una rápida convergencia en pocas generaciones. Estos algoritmos buscan equilibrar dos objetivos clave: **Exploración**, que consiste en descubrir nuevas regiones del espacio de búsqueda, y **Explotación**, enfocada en refinar y mejorar las soluciones existentes.\n\nPara las simulaciones presentadas en los GIF, se utilizaron los siguientes parámetros: tamaño de población = 30, número de generaciones = 20, tasa de mutación = 0.5, y tasa de cruce = 0.5. El parámetro de mutación $\\delta$ se ajusta según los límites de evaluación de las funciones objetivo, representando aproximadamente un 5% del rango de dichas funciones.\n\n### Observaciones\n\nVentajas:\n\n-   No requiere derivadas ni condiciones específicas en \\$\\$\\$f(x)\\$ .\n-   Es efectivo en espacios de búsqueda multimodales o no convexos.\n-   Adaptable a diversos problemas.\n\nDesventajas:\n\n-   Puede ser computacionalmente costoso.\n-   No garantiza convergencia al óptimo global.\n-   Requiere ajuste cuidadoso de parámetros.\n\n## Optimización de partículas\n\n### Concepto Básico y Analogía\n\nLa Optimización por Enjambre de Partículas (PSO) es una técnica metaheurística inspirada en el comportamiento social de los animales, como los pájaros o los peces. En PSO, cada solución potencial al problema se representa como una partícula que se mueve en un espacio de búsqueda multidimensional. Cada partícula ajusta su posición y velocidad en cada iteración, basándose en su propia mejor posición encontrada (pBest) y la mejor posición encontrada por todo el enjambre (gBest). [@kennedy1995particle]\n\nLos métodos PSO se atribuyen originalmente a los investigadores Kennedy, Eberhart​ y Shi. En un principio fueron concebidos para elaborar modelos de conductas sociales,​como el movimiento descrito por los organismos vivos en una bandada de aves o un banco de peces. Posteriormente el algoritmo se simplificó y se comprobó que era adecuado para problemas de optimización. [@kennedy1997particle]\n\n**Funcionamiento de PSOz**\n\nEn el algoritmo PSO (Particle Swarm Optimization), cada partícula, que representa un individuo, posee una posición *p*⃗  ​ dentro del espacio de búsqueda y una velocidad *v*⃗ que determina su desplazamiento. Estas partículas, al igual que objetos en un entorno físico, cuentan con una inercia *w*, la cual conserva su movimiento en la dirección previamente seguida.\n\n``` python\nself.positions = np.random.uniform(\n    self.bounds[:, 0],\n    self.bounds[:, 1],\n    size=(n_particles, dimensions)\n)\n\nself.velocities = np.zeros((n_particles, dimensions))\n\n# Evaluar posiciones iniciales\nself.scores = np.array([self.objective_function(p) for p in self.positions])\n```\n\n```         \n```\n\nAdemás, su aceleración, que representa un cambio en la velocidad, está influenciada por dos factores principales:\n\n-   Atracción hacia su mejor posición personal: Cada partícula tiende a moverse hacia la mejor ubicación que ha identificado en su trayectoria histórica (*pbest).*\n\n-   Atracción hacia la mejor posición global: Las partículas también se dirigen hacia la mejor ubicación encontrada por el grupo completo en el espacio de búsqueda (*pgbest*).\n\n![](images/paste-1.png)\n\n[@sancho_pso_image]\n\n``` python\nfor iteration in range(self.max_iter):\n    # Actualizar velocidades\n    r1, r2 = np.random.rand(2)\n    self.velocities = (self.w * self.velocities +\n                     self.c1 * r1 * (self.p_best - self.positions) +\n                     self.c2 * r2 * (self.g_best - self.positions))\n    \n    # Actualizar posiciones\n    self.positions += self.velocities\n    \n    # Mantener partículas dentro de los límites\n    self.positions = np.clip(\n        self.positions,\n        self.bounds[:, 0],\n        self.bounds[:, 1]\n    )\n    \n    # Evaluar nuevas posiciones\n    self.scores = np.array([self.objective_function(p) for p in self.positions])\n    \n    # Actualizar mejores posiciones personales\n    improved_mask = self.scores < self.p_best_scores\n    self.p_best[improved_mask] = self.positions[improved_mask]\n    self.p_best_scores[improved_mask] = self.scores[improved_mask]\n    \n    # Actualizar mejor posición global\n    min_score_idx = np.argmin(self.p_best_scores)\n    if self.p_best_scores[min_score_idx] < self.g_best_score:\n        self.g_best = self.p_best[min_score_idx].copy()\n        self.g_best_score = self.p_best_scores[min_score_idx]\n```\n\nEl algoritmo se detiene cuando se alcanza un número máximo de iteraciones, o cuando la mejora en la función objetivo es menor a un umbral predefinido.\n\nAl implementar el algoritmo, se presentó un comportamiento oscilatorio donde las partículas convergían inicialmente pero luego se dispersaban de manera repentina. El análisis reveló cuatro posibles causas: velocidades excesivas de las partículas, coeficientes de aprendizaje mal ajustados, peso de inercia estático y ausencia de un mecanismo de estabilización.\n\nLa solución implementada aborda estos problemas mediante cuatro modificaciones: Se  limitó la velocidad máxima al 10% del espacio de búsqueda para evitar saltos excesivos, se optimizaron los coeficientes cognitivo y social a un valor de 2.0 para balancear exploración y explotación, se implementó un peso de inercia dinámico que decrece linealmente de 0.9 a 0.4 durante la optimización y se añadió un factor de constricción calculado a partir de los coeficientes de aprendizaje para garantizar convergencia matemática.\n\n``` python\n# Control de Velocidad Máxima\nv_max = 0.1 * (bounds[:, 1] - bounds[:, 0])\nvelocities = np.clip(velocities, -v_max, v_max)\n\n# Peso de Inercia Dinámico\nw = w_max - (w_max - w_min) * (iteracion / max_iter)\n\n# Factor de Constricción\nphi = c1 + c2\nchi = 2 / abs(2 - phi - np.sqrt(phi * phi - 4 * phi))\n\n# Parámetros Optimizados\nc1 = c2 = 2.0\nw_max = 0.9\nw_min = 0.4\n```\n\nEstas modificaciones resultaron en una mejora significativa en la estabilidad del algoritmo, con una transición más suave entre las fases de exploración y explotación, y una convergencia más consistente hacia el óptimo global.\n\n::: panel-tabset\n### Función de Rosenbrock\n\n$$f(\\mathbf{x}) = \\sum_{i=1}^{d-1} \\left[ 100(x_{i+1} - x_i^2)^2 + (x_i - 1)^2 \\right]$$\n\n![](Rosenbrock_particulas_animation.gif)\n\n### Función de Rastrigin\n\n$$f(\\mathbf{x}) = 10d + \\sum_{i=1}^{d} \\left[ x_i^2 - 10 \\cos(2\\pi x_i) \\right]$$\n\n![](Rastrigin_particulas_animation.gif)\n\n### Función de Schwefel\n\n$$ f(\\mathbf{x}) = 418.9829d - \\sum_{i=1}^{d} x_i \\sin(\\sqrt{|x_i|}) $$\n\n![](Schwefel_particulas_animation.gif)\n\n### Función de Griewank\n\n$$ f(\\mathbf{x}) = 1 + \\frac{1}{4000} \\sum_{i=1}^{d} x_i^2 - \\prod_{i=1}^{d} \\cos\\left(\\frac{x_i}{\\sqrt{i}}\\right) $$\n\n![](Griewank_particulas_animation.gif)\n\n### Función Goldstein-Price\n\n$$\n\\begin{align}\nf(x_1, x_2) = & \\left[1 + (x_1 + x_2 + 1)^2 (19 - 14x_1 + 3x_1^2 - 14x_2 + 6x_1x_2 + 3x_2^2)\\right] \\\\\n         & \\left[30 + (2x_1 - 3x_2)^2 (18 - 32x_1 + 12x_1^2 + 48x_2 - 36x_1x_2 + 27x_2^2)\\right]\n\\end{align}\n$$\n\n![](Goldstein_Price_particulas_animation.gif)\n\n### Función de las seis jorobas de camello\n\n$$ f(x_1, x_2) = \\left(4 - 2.1x_1^2 + \\frac{x_1^4}{3}\\right)x_1^2 + x_1x_2 + \\left(-4 + 4x_2^2\\right)x_2^2 $$\n\n![](Camel_Six_Humps_particulas_animation.gif)\n:::\n\n## Optimización diferencial\n\n**Funcionamiento Básico**\n\nLa Evolución Diferencial (ED) es un algoritmo de optimización poblacional inspirado en los procesos evolutivos naturales. Al igual que otros algoritmos de esta categoría, la ED mantiene una población de soluciones candidatas, las cuales se recombinan y mutan para producir nuevos individuos los cuales serán elegidos de acuerdo al valor de su función de desempeño. Lo que caracteriza a la ED es el uso de vectores de prueba, los cuales compiten con los individuos de la población actual a fin de sobrevivir. [@price1995differential]\n\n**Pasos clave:**\n\n-   **Inicialización de la población:**\n\n    -   Se genera aleatoriamente una población inicial de individuos (soluciones potenciales).\n\n    -   Cada individuo es un vector que representa un punto en el espacio de búsqueda.\n\n        ``` python\n        def initialize_population(self):\n            \"\"\"\n            Inicializa la población de manera aleatoria dentro de los límites especificados\n\n            Returns:\n            - Matriz numpy con población inicial\n            \"\"\"\n            # Crea una matriz de ceros con el tamaño de la población\n            population = np.zeros((self.population_size, self.dimension))\n\n            # Genera valores aleatorios para cada dimensión\n            for i in range(self.dimension):\n                population[:, i] = np.random.uniform(\n                    self.bounds[i][0],  # Límite inferior\n                    self.bounds[i][1],  # Límite superior\n                    size=self.population_size  # Número de individuos\n                )\n            return population\n        ```\n\n-   **Evaluación de la población:**\n\n    -   Se evalúa el valor de la función objetivo para cada individuo de la población\n\n-   **Generación de nuevos individuos:**\n\n    -   **Mutación:** Se crea un vector mutante sumando a un individuo objetivo una diferencia escalada entre otros dos individuos de la población.\n\n        ``` python\n        def mutation(self, population):\n            \"\"\"\n            Aplica la estrategia de mutación DE/rand/1\n\n            Parameters:\n            - population: Población actual\n\n            Returns:\n            - Población mutada\n            \"\"\"\n            # Crea una matriz para almacenar la población mutada\n            mutation_pop = np.zeros_like(population)\n\n            for i in range(self.population_size):\n                # Selecciona tres individuos aleatorios diferentes\n                candidates = list(range(self.population_size))\n                candidates.remove(i)\n                r1, r2, r3 = np.random.choice(candidates, 3, replace=False)\n\n                # Genera un nuevo vector mediante mutación\n                mutation_pop[i] = population[r1] + self.F * (population[r2] - \n                                                               population[r3])\n\n                # Asegura que los valores estén dentro de los límites\n                for j in range(self.dimension):\n                    mutation_pop[i, j] = np.clip(\n                        mutation_pop[i, j],\n                        self.bounds[j][0],\n                        self.bounds[j][1]\n                    )\n\n            return mutation_pop\n        ```\n\n    -   **Cruce:** Se crea un vector de prueba combinando el vector mutante y el individuo objetivo mediante un operador de cruce.\n\n        ``` python\n        def crossover(self, population, mutation_pop):\n            \"\"\"\n            Aplica el cruce binomial (crossover)\n\n            Parameters:\n            - population: Población actual\n            - mutation_pop: Población mutada\n\n            Returns:\n            - Población de prueba tras el cruce\n            \"\"\"\n            # Crea una matriz para almacenar la población de prueba\n            trial_pop = np.zeros_like(population)\n        \t\n            for i in range(self.population_size):\n                # Genera puntos de cruce basados en CR\n                cross_points = np.random.rand(self.dimension) <= self.CR\n                # Asegura al menos un punto de cruce\n                cross_points[np.random.randint(0, self.dimension)] = True\n\n                # Genera vector de prueba\n                trial_pop[i] = np.where(cross_points, mutation_pop[i], population[i])\n        \t\n            return trial_pop\n        ```\n\n-   **Selección:** Se compara el valor de la función objetivo del vector de prueba con el del individuo objetivo. El mejor de los dos se selecciona para la siguiente generación.\n\n\n    ```{pytho}\n    ```\n\n\n-   **Criterio de parada**:\n\n    -   Se repiten los pasos 3 y 4 hasta que se cumpla un criterio de parada (número máximo de generaciones, mejora mínima en la función objetivo, etc.)\n\n        [@martinez2019evolucion]\n\n::: panel-tabset\n### Función de Rosenbrock\n\n$$f(\\mathbf{x}) = \\sum_{i=1}^{d-1} \\left[ 100(x_{i+1} - x_i^2)^2 + (x_i - 1)^2 \\right]$$\n\n![](Rosenbrock_diferential_evolution_animation.gif)\n\n### Función de Rastrigin\n\n$$f(\\mathbf{x}) = 10d + \\sum_{i=1}^{d} \\left[ x_i^2 - 10 \\cos(2\\pi x_i) \\right]$$\n\n![](Rastrigin_diferential_evolution_animation.gif)\n\n### Función de Schwefel\n\n$$ f(\\mathbf{x}) = 418.9829d - \\sum_{i=1}^{d} x_i \\sin(\\sqrt{|x_i|}) $$\n\n![](Schwefel_diferential_evolution_animation.gif)\n\n### Función de Griewank\n\n$$ f(\\mathbf{x}) = 1 + \\frac{1}{4000} \\sum_{i=1}^{d} x_i^2 - \\prod_{i=1}^{d} \\cos\\left(\\frac{x_i}{\\sqrt{i}}\\right) $$\n\n![](Griewank_diferential_evolution_animation.gif)\n\n### Función Goldstein-Price\n\n$$ \\begin{align} f(x_1, x_2) = & \\left[1 + (x_1 + x_2 + 1)^2 (19 - 14x_1 + 3x_1^2 - 14x_2 + 6x_1x_2 + 3x_2^2)\\right] \\\\          & \\left[30 + (2x_1 - 3x_2)^2 (18 - 32x_1 + 12x_1^2 + 48x_2 - 36x_1x_2 + 27x_2^2)\\right] \\end{align} $$\n\n![](Goldstein_Price_diferential_evolution_animation.gif)\n\n### Función de las seis jorobas de camello\n\n$$ f(x_1, x_2) = \\left(4 - 2.1x_1^2 + \\frac{x_1^4}{3}\\right)x_1^2 + x_1x_2 + \\left(-4 + 4x_2^2\\right)x_2^2 $$\n\n![](Camel_Six_Humps_diferential_evolution_animation.gif)\n:::\n\n## \n\n# Resultados\n\nComo se puede observar, en la mayoría de los casos de optimización para una unica corrida los puntos óptimos conergen a mínimos locales, lo que indica que los resultados óptimos pueden estar fuertemente influenciado por los valores iniciales de $x$ o las condiciones de inicio de los algoritmos. Por esta razón, para evaluar el rendimiento y el comportamiento de los algoritmos en un entorno más general, se realizarán múltiples ejecuciones. En cada corrida, los algoritmos partirán de valores iniciales distintos generados aleatoriamente. Con esto se verá cuanto tardan los algoritmos en mejorar la evaluación de la función objetivo y cuales pueden ser algunos comentarios particulares a realizar. Los resultados se presentaran para los casos de 2 y 3 dimensiones de las funciones.\n\n(Tabla o gráfica de resutlados)\n\n# Conclusiones y comentarios\n\n### Tareas:\n\n1.  **Escoja dos funciones de prueba.**\n2.  **Optimización con método de descenso por gradiente:**\n    -   Optimice las funciones seleccionadas en **dos y tres dimensiones** usando un **método de descenso por gradiente** con condición inicial aleatoria.\n3.  **Optimización con métodos heurísticos:**\n    -   Optimice las funciones seleccionadas en **dos y tres dimensiones** usando:\n        -   Algoritmos evolutivos.\n        -   Optimización de partículas.\n        -   Evolución diferencial.\n4.  **Representación visual:**\n    -   Cree un **GIF animado** o un **video** que muestre el proceso de optimización usando:\n        -   **Descenso por gradiente**.\n        -   **Métodos heurísticos**.\n\n### Discusión:\n\nReflexione sobre los siguientes puntos: - ¿Qué aportaron los métodos de **descenso por gradiente** y qué aportaron los **métodos heurísticos**? - Para responder a esta pregunta, considere: - El **valor final** de la función objetivo. - El **número de evaluaciones** de la función objetivo. - Es posible que se requiera realizar **varias corridas** de los algoritmos para obtener conclusiones significativas.\n\n# Parte 2: Optimización Combinatoria\n\n## Problema del Viajero:\n\nUn vendedor debe realizar un recorrido por **todas las capitales** de los **32 estados** de los **Estados Unidos Mexicanos**.\n\n### Tareas:\n\n1.  **Optimización con métodos metaheurísticos:**\n    -   Utilice **colonias de hormigas** para encontrar el orden óptimo del recorrido.\n    -   Utilice **algoritmos genéticos** para encontrar el orden óptimo del recorrido.\n2.  **Costo del recorrido:**\n    -   El costo de desplazamiento entre ciudades se calcula como la suma de:\n        -   El valor de la **hora del vendedor** (este es un parámetro que debe estudiarse).\n        -   El **costo de los peajes**.\n        -   El **costo del combustible**.\n    -   Cada equipo debe definir el **vehículo** que utilizará el vendedor para realizar el recorrido y, con base en esta elección, **calcular el costo del combustible**.\n\n### Representación Visual:\n\n-   Cree un **GIF animado** o un **video** que muestre cómo se comporta la **mejor solución** encontrada, usando un **gráfico del recorrido** en el mapa de México.\n\n------------------------------------------------------------------------\n\n### Discusión:\n\nReflexione sobre: - Los resultados obtenidos con las **colonias de hormigas** y los **algoritmos genéticos**. - Comparación de costos y tiempo de ejecución.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}